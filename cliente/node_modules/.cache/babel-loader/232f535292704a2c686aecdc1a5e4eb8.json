{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\agarcia\\\\marcaje\\\\cliente\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useEffect, useRef, useState } from 'react';\nimport logo from './img/logo.png';\nimport Reloj from './componentes/Reloj';\nimport Axios from 'axios';\nimport './css/App.css';\nimport axios from 'axios'; //import { findAllByTestId } from '@testing-library/react';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UseAsyncState(initialValue) {\n  _s();\n\n  const [value, setValue] = useState(initialValue);\n\n  const setter = x => new Promise(resolve => {\n    setValue(x);\n    resolve(x);\n  });\n\n  return [value, setter];\n}\n\n_s(UseAsyncState, \"L08zUdRTae9t+nWvf9xbU6NcRrM=\");\n\n_c = UseAsyncState;\n\nfunction App() {\n  _s2();\n\n  //variables para obtener la fecha y hora\n  const date = new Date();\n  const dia_marcaje = date.getDate();\n  const mes_marcaje = date.getMonth() + 1;\n  const periodo_marcaje = date.getFullYear();\n  const fecha_marcaje = periodo_marcaje + \"-\" + mes_marcaje + \"-\" + dia_marcaje;\n  let hora_marcaje = date.toLocaleTimeString(); //Hooks para mostrar el nombre y apellido en pantalla\n\n  const [mensajeNombre, setMensajeNombre] = UseAsyncState(\"\");\n  const [mensajeApellido, setMensajeApellido] = UseAsyncState(\"\"); //Hook para el focus permanente\n\n  const [state, setState] = useState('');\n\n  const Captura = event => {\n    //condicion para la busqueda e ingreso de datos cuando el lector manda la señal\n    if (event.key === 'Enter') {\n      setState(event.key); //se llama a la funcion \n\n      BusquedaEmpleado();\n    }\n  }; ////////\n  //Hook para recibir el codigo de barra\n\n\n  const [codigo_barra, setCodigo_Barra] = useState(\"\"); //hace focus al texbox que obtendrá la variable del codigo barras\n\n  const focusDiv = useRef(null);\n  useEffect(() => {\n    const focusPermanente = setInterval(() => {\n      //quita el focus del txt \n      focusDiv.current.blur(); //condicion para realizar el focus y poder seleccionar todo el texto\n\n      if (focusDiv.current) focusDiv.current.focus();\n    }, 500);\n    return () => clearInterval(focusPermanente);\n  }, [focusDiv]);\n  useEffect(() => {\n    const limpiarTexto = setInterval(() => {\n      setMensajeNombre(\"\");\n      setMensajeApellido(\"\");\n    }, 300000); //5 min aprox\n    //9min = 500000\n    //17min = 1000000\n\n    return () => clearInterval(limpiarTexto);\n  }, []); //funcion para actualizar la variable que obtiene la hora\n\n  function actualizarHora() {\n    const fecha = new Date();\n    hora_marcaje = fecha.toLocaleTimeString();\n  } //llama a la función para la Hora\n\n\n  setInterval(actualizarHora, 1000); //seleccionar todo el contenido del txt\n\n  const handleFocus = event => event.target.select(); //insertar datos\n\n\n  const IngresoDatos = () => {\n    Axios.post('http://localhost:5000/apis/rrh/registrar/registrarMarcaje/' + fecha_marcaje + '/' + hora_marcaje + '/' + codigo_barra, {}).then(() => {\n      /*\r\n      console.log(\"conexion exitosa\");\r\n      console.log(\"Ingreso Realizado\");\r\n      */\n      Bitacora();\n    });\n  }; //\n  //insertar datos\n\n\n  const Bitacora = () => {\n    Axios.post('http://localhost:5000/apis/rrh/registrar/registrarBitacoraMarcaje/' + fecha_marcaje + '/' + hora_marcaje + '/' + codigo_barra, {}).then(() => {\n      /*\r\n        console.log(\"Registro Bitacora\")\r\n        */\n    });\n  }; //\n\n\n  const ActualizarDatosHraSalida = codigo_barra => {\n    Axios.put('http://localhost:5000/apis/rrh/actualizar/actualizarHraSalidaMarcaje/' + codigo_barra + '/' + hora_marcaje + '/' + fecha_marcaje, {}).then(() => {\n      /*\r\n       console.log(\"Dato Actualizado\")\r\n       */\n      Bitacora();\n    });\n  }; //\n\n\n  const BusquedaEmpleado = () => {\n    axios.get('http://localhost:5000/apis/rrh/buscar/obtenerEmpleado/' + codigo_barra).then(result => {\n      //condicional para verificar si existe el dato en la BD\n      if (result.data.length > 0) {\n        //Se agrega el nombre y apellido para luego mostrarlos en pantalla\n        setMensajeNombre(result.data[0].nombre);\n        setMensajeApellido(result.data[0].apellido); //console.log(\"Empleado Encontrado: \"+ result.data[0].nombre)\n\n        BuscarFechaActual();\n      } else {\n        setMensajeNombre(\"Empleado No Encontrado\");\n        setMensajeApellido(\"\");\n      }\n    }).catch(console.log());\n  }; //buscar datos\n\n\n  const BusquedaFechaExistente = () => {\n    Axios.get('http://localhost:5000/apis/rrh/buscar/obtenerFechaExistente/' + codigo_barra + '/' + fecha_marcaje).then(result => {\n      if (result.data.length > 0) {\n        // console.log(\"Fecha Existente Encontrada\")\n        ActualizarDatosHraSalida(codigo_barra);\n      } else {\n        //Fecha que contiene NULL en hra salida \n        // console.log(\"Fecha Existente No Encontrada\")\n        IngresoDatos(codigo_barra);\n      }\n    });\n  }; //\n  //buscar datos\n\n\n  const BuscarFechaActual = () => {\n    Axios.get('http://localhost:5000/apis/rrh/buscar/obtenerFechaMarcaje/' + codigo_barra + '/' + fecha_marcaje).then(result => {\n      //condicional para verificar si existe el dato en la BD\n      if (result.data.length > 0) {\n        // console.log(\"Existe Fecha Anterior Registrada\")\n        BusquedaFechaExistente();\n      } else {\n        //No Existe el dato en la busqueda\n        //Se inserta un nuevo Registro con Hora Entrada\n        // console.log(\"Nuevo Registro de Hra Entrada\")\n        // console.log(\"Ingreso Marcaje: 0\");\n        IngresoDatos(codigo_barra);\n      }\n    }).catch(console.log());\n  };\n  /*\r\n  const CalculoTiempoDiario =(HoraEnt, HraSal)=>{\r\n  console.log(\"Hora E: \" + HoraEnt);\r\n  console.log(\"Hora S: \" + HraSal);\r\n    var ObtieneHraFinal = (HraSal);\r\n  var ObtieneHraInicial = (HoraEnt);\r\n    var HoraFinal = (ObtieneHraFinal).split(\":\"),\r\n      HoraInicial = (ObtieneHraInicial).split(\":\"),\r\n      TiempoMayor = new Date(),\r\n      TiempoMenor = new Date();\r\n  //Se establecen en arreglos los 3 parametros\r\n  TiempoMayor.setHours(HoraFinal[0], HoraFinal[1], HoraFinal[2]);\r\n  TiempoMenor.setHours(HoraInicial[0], HoraInicial[1], HoraInicial[2]);\r\n  //Calculo de tiempo laborado diariamente\r\n  TiempoMayor.setHours(TiempoMayor.getHours() - TiempoMenor.getHours(), TiempoMayor.getMinutes() - TiempoMenor.getMinutes(), TiempoMayor.getSeconds() - TiempoMenor.getSeconds());\r\n  var Horas =TiempoMayor.getHours();\r\n  var Minutos =TiempoMayor.getMinutes();\r\n  var Segundos =TiempoMayor.getSeconds();\r\n  //Se agregan los 0's faltantes \r\n  if (Horas<10){Horas=\"0\"+Horas;}\r\n  if (Minutos<10){Minutos=\"0\"+Minutos;}\r\n  if (Segundos<10){Segundos=\"0\"+Segundos;}\r\n  var HrasLaboradas = Horas + \":\"+ Minutos + \":\"+ Segundos;\r\n  console.log(\"Horas Laboradas: \" + Horas + \":\"+ Minutos + \":\"+ Segundos);\r\n  ActualizarDatosTiempoLaborado(codigo_barra,HrasLaboradas);\r\n  }*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"img_logo\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reloj\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Reloj, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nombre_emp\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [mensajeNombre, \" \", mensajeApellido]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"codigo_barra\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"CodigoBarra\",\n        type: \"text\",\n        placeholder: \"codigo\",\n        ref: focusDiv,\n        onKeyDown: e => Captura(e),\n        onFocus: handleFocus,\n        onChange: event => {\n          setCodigo_Barra(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"CTmmxNdn9zvib0Ufvv8i+yrLSZU=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UseAsyncState\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/agarcia/marcaje/cliente/src/App.js"],"names":["React","Component","useEffect","useRef","useState","logo","Reloj","Axios","axios","UseAsyncState","initialValue","value","setValue","setter","x","Promise","resolve","App","date","Date","dia_marcaje","getDate","mes_marcaje","getMonth","periodo_marcaje","getFullYear","fecha_marcaje","hora_marcaje","toLocaleTimeString","mensajeNombre","setMensajeNombre","mensajeApellido","setMensajeApellido","state","setState","Captura","event","key","BusquedaEmpleado","codigo_barra","setCodigo_Barra","focusDiv","focusPermanente","setInterval","current","blur","focus","clearInterval","limpiarTexto","actualizarHora","fecha","handleFocus","target","select","IngresoDatos","post","then","Bitacora","ActualizarDatosHraSalida","put","get","result","data","length","nombre","apellido","BuscarFechaActual","catch","console","log","BusquedaFechaExistente","e"],"mappings":"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","sourcesContent":["import React, {Component,useEffect, useRef, useState} from 'react';\r\nimport logo from './img/logo.png';\r\nimport Reloj from './componentes/Reloj';\r\nimport Axios from 'axios'\r\nimport './css/App.css';\r\nimport axios from 'axios';\r\n//import { findAllByTestId } from '@testing-library/react';\r\n\r\nfunction UseAsyncState(initialValue) {\r\n  const [value, setValue] = useState(initialValue);\r\n  const setter = x =>\r\n    new Promise(resolve => {\r\n      setValue(x);\r\n      resolve(x);\r\n    });\r\n  return [value, setter];\r\n}\r\n\r\nfunction App (){\r\n//variables para obtener la fecha y hora\r\nconst date = new Date();\r\nconst dia_marcaje = date.getDate();\r\nconst mes_marcaje = (date.getMonth()+1);\r\nconst periodo_marcaje = date.getFullYear();\r\nconst fecha_marcaje = (periodo_marcaje +\"-\"+ mes_marcaje+\"-\"+dia_marcaje);\r\n\r\nlet hora_marcaje = date.toLocaleTimeString();\r\n//Hooks para mostrar el nombre y apellido en pantalla\r\nconst[mensajeNombre, setMensajeNombre] =UseAsyncState(\"\");\r\nconst[mensajeApellido, setMensajeApellido] =UseAsyncState(\"\");\r\n//Hook para el focus permanente\r\n  const [state, setState] = useState('');\r\n\r\n  const Captura = (event) => {  \r\n    //condicion para la busqueda e ingreso de datos cuando el lector manda la señal\r\n    if(event.key==='Enter'){\r\n      setState(event.key);\r\n      //se llama a la funcion \r\n      BusquedaEmpleado();\r\n    }\r\n  };\r\n////////\r\n\r\n//Hook para recibir el codigo de barra\r\nconst [codigo_barra, setCodigo_Barra] = useState(\"\");\r\n\r\n//hace focus al texbox que obtendrá la variable del codigo barras\r\nconst focusDiv = useRef(null);\r\nuseEffect(()=>{\r\n  const focusPermanente = setInterval (()=>{\r\n    //quita el focus del txt \r\n    focusDiv.current.blur();\r\n    //condicion para realizar el focus y poder seleccionar todo el texto\r\n    if(focusDiv.current)focusDiv.current.focus();\r\n  },500);\r\n  return()=>clearInterval(focusPermanente);\r\n},[focusDiv]);\r\n\r\n useEffect(()=>{\r\n  const limpiarTexto = setInterval (()=>{\r\n    setMensajeNombre(\"\")\r\n    setMensajeApellido(\"\")\r\n  },300000);//5 min aprox\r\n   //9min = 500000\r\n //17min = 1000000\r\n\r\n  return()=>clearInterval(limpiarTexto);\r\n},[]);\r\n\r\n //funcion para actualizar la variable que obtiene la hora\r\n function actualizarHora(){\r\n  const fecha = new Date();\r\n  hora_marcaje = fecha.toLocaleTimeString();\r\n  }\r\n//llama a la función para la Hora\r\n  setInterval(actualizarHora, 1000); \r\n\r\n//seleccionar todo el contenido del txt\r\nconst handleFocus = (event) => event.target.select();\r\n\r\n//insertar datos\r\nconst IngresoDatos =()=>{\r\n  Axios.post('http://localhost:5000/apis/rrh/registrar/registrarMarcaje/'+ fecha_marcaje + '/' + hora_marcaje + '/' + codigo_barra, {    \r\n\r\n}).then(()=>{\r\n/*\r\nconsole.log(\"conexion exitosa\");\r\nconsole.log(\"Ingreso Realizado\");\r\n*/ \r\nBitacora();\r\n  });\r\n};\r\n//\r\n\r\n//insertar datos\r\nconst Bitacora =()=>{\r\n  Axios.post('http://localhost:5000/apis/rrh/registrar/registrarBitacoraMarcaje/'+ fecha_marcaje + '/' + hora_marcaje + '/' + codigo_barra, {    \r\n}).then(()=>{\r\n/*\r\n  console.log(\"Registro Bitacora\")\r\n  */\r\n  });\r\n};\r\n//\r\n\r\nconst ActualizarDatosHraSalida = (codigo_barra)=>{\r\n\r\n  Axios.put('http://localhost:5000/apis/rrh/actualizar/actualizarHraSalidaMarcaje/'+ codigo_barra + '/' + hora_marcaje + '/' + fecha_marcaje,{\r\n  }).then(()=>{\r\n  /*\r\n   console.log(\"Dato Actualizado\")\r\n   */\r\n   Bitacora();\r\n  });  \r\n};\r\n//\r\n\r\nconst BusquedaEmpleado = () =>{\r\n  axios.get('http://localhost:5000/apis/rrh/buscar/obtenerEmpleado/' + codigo_barra).then\r\n  (result=>{\r\n//condicional para verificar si existe el dato en la BD\r\n     if(result.data.length > 0){\r\n      //Se agrega el nombre y apellido para luego mostrarlos en pantalla\r\n      setMensajeNombre(result.data[0].nombre)\r\n      setMensajeApellido(result.data[0].apellido)\r\n    //console.log(\"Empleado Encontrado: \"+ result.data[0].nombre)\r\n    BuscarFechaActual();\r\n      \r\n  }else{ \r\n      setMensajeNombre(\"Empleado No Encontrado\")\r\n      setMensajeApellido(\"\")\r\n  }\r\n  \r\n}).catch\r\n  (console.log())\r\n  }\r\n\r\n\r\n//buscar datos\r\nconst BusquedaFechaExistente = () => {\r\n  Axios.get('http://localhost:5000/apis/rrh/buscar/obtenerFechaExistente/'+ codigo_barra + '/' + fecha_marcaje).then\r\n\r\n  (result=>{\r\n\r\n    if(result.data.length > 0){\r\n\r\n     // console.log(\"Fecha Existente Encontrada\")\r\n      ActualizarDatosHraSalida(codigo_barra);\r\n     \r\n\r\n       }else{\r\n      //Fecha que contiene NULL en hra salida \r\n      // console.log(\"Fecha Existente No Encontrada\")\r\n      IngresoDatos(codigo_barra);\r\n      \r\n       }\r\n\r\n       });\r\n    };\r\n//\r\n\r\n//buscar datos\r\nconst BuscarFechaActual = () => {\r\n  Axios.get('http://localhost:5000/apis/rrh/buscar/obtenerFechaMarcaje/'+ codigo_barra +'/'+ fecha_marcaje).then\r\n  (result=>{\r\n    //condicional para verificar si existe el dato en la BD\r\n         if(result.data.length > 0){\r\n          // console.log(\"Existe Fecha Anterior Registrada\")\r\n          BusquedaFechaExistente();\r\n          \r\n      }else{ \r\n        //No Existe el dato en la busqueda\r\n        //Se inserta un nuevo Registro con Hora Entrada\r\n       // console.log(\"Nuevo Registro de Hra Entrada\")\r\n       // console.log(\"Ingreso Marcaje: 0\");\r\n\r\n        IngresoDatos(codigo_barra);\r\n        \r\n      }\r\n      \r\n    }).catch\r\n      (console.log())\r\n      }\r\n\r\n  /*\r\nconst CalculoTiempoDiario =(HoraEnt, HraSal)=>{\r\n  console.log(\"Hora E: \" + HoraEnt);\r\n  console.log(\"Hora S: \" + HraSal);\r\n\r\n  var ObtieneHraFinal = (HraSal);\r\n  var ObtieneHraInicial = (HoraEnt);\r\n\r\n  var HoraFinal = (ObtieneHraFinal).split(\":\"),\r\n      HoraInicial = (ObtieneHraInicial).split(\":\"),\r\n      TiempoMayor = new Date(),\r\n      TiempoMenor = new Date();\r\n\r\n//Se establecen en arreglos los 3 parametros\r\nTiempoMayor.setHours(HoraFinal[0], HoraFinal[1], HoraFinal[2]);\r\nTiempoMenor.setHours(HoraInicial[0], HoraInicial[1], HoraInicial[2]);\r\n//Calculo de tiempo laborado diariamente\r\nTiempoMayor.setHours(TiempoMayor.getHours() - TiempoMenor.getHours(), TiempoMayor.getMinutes() - TiempoMenor.getMinutes(), TiempoMayor.getSeconds() - TiempoMenor.getSeconds());\r\n\r\nvar Horas =TiempoMayor.getHours();\r\nvar Minutos =TiempoMayor.getMinutes();\r\nvar Segundos =TiempoMayor.getSeconds();\r\n//Se agregan los 0's faltantes \r\nif (Horas<10){Horas=\"0\"+Horas;}\r\nif (Minutos<10){Minutos=\"0\"+Minutos;}\r\nif (Segundos<10){Segundos=\"0\"+Segundos;}\r\nvar HrasLaboradas = Horas + \":\"+ Minutos + \":\"+ Segundos;\r\nconsole.log(\"Horas Laboradas: \" + Horas + \":\"+ Minutos + \":\"+ Segundos);\r\n\r\nActualizarDatosTiempoLaborado(codigo_barra,HrasLaboradas);\r\n\r\n}*/\r\n\r\n  return(\r\n    <main>\r\n    <div className =\"img_logo\">\r\n      <img src={logo}/>\r\n    </div>\r\n    <div className=\"reloj\">\r\n      <div>\r\n      <Reloj></Reloj>\r\n      </div>\r\n    </div>\r\n    <div className=\"nombre_emp\">\r\n    <h1>{mensajeNombre} {mensajeApellido}</h1>\r\n    </div>\r\n      <div className=\"codigo_barra\">\r\n        <input id=\"CodigoBarra\" type=\"text\" placeholder='codigo' ref={focusDiv}   onKeyDown={(e) => Captura(e)}  onFocus={handleFocus} onChange={(event) => {setCodigo_Barra(event.target.value);}}/>\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\n  export default App;"]},"metadata":{},"sourceType":"module"}