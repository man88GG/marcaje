{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\agarcia\\\\marcaje\\\\cliente\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useEffect, useRef, useState } from 'react';\nimport logo from './img/logo.jpg';\nimport Reloj from './componentes/Reloj';\nimport Axios from 'axios';\nimport './css/App.css';\nimport axios from 'axios'; //import { findAllByTestId } from '@testing-library/react';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UseAsyncState(initialValue) {\n  _s();\n\n  const [value, setValue] = useState(initialValue);\n\n  const setter = x => new Promise(resolve => {\n    setValue(x);\n    resolve(x);\n  });\n\n  return [value, setter];\n}\n\n_s(UseAsyncState, \"L08zUdRTae9t+nWvf9xbU6NcRrM=\");\n\n_c = UseAsyncState;\n\nfunction App() {\n  _s2();\n\n  //variables para obtener la fecha y hora\n  const date = new Date();\n  const dia_marcaje = date.getDate();\n  const mes_marcaje = date.getMonth() + 1;\n  const periodo_marcaje = date.getFullYear();\n  const fecha_marcaje = periodo_marcaje + \"-\" + mes_marcaje + \"-\" + dia_marcaje; //const hora_marcaje = date.toLocaleTimeString();\n  //Hooks para mostrar el nombre y apellido en pantalla\n\n  const [mensajeNombre, setMensajeNombre] = UseAsyncState(\"\");\n  const [mensajeApellido, setMensajeApellido] = UseAsyncState(\"\"); //Hook para recargar la pantalla\n\n  const [controlador1, setControlador1] = useState(\"\"); //Hook para el focus permanente\n\n  const [state, setState] = useState('');\n\n  const Captura = event => {\n    //condicion para la busqueda e ingreso de datos cuando el lector manda la señal\n    if (event.key === 'Enter') {\n      //se cambia el estado al nombre de la tecla que es presionada, en este caso es la tecla enter\n      setControlador1('0');\n      setState(event.key); //se llama a la funcion \n\n      BusquedaEmpleado();\n    } else {\n      //funcion para recargar la pagina luego de 5 min\n      HandlerOne();\n    }\n  }; ////////\n\n\n  function setDate() {\n    const now = new Date();\n    const seconds = now.getSeconds();\n    const secondsDegrees = seconds / 60 * 360 + 90;\n\n    if (secondsDegrees == 90) {\n      secondHand.style.transition = \"\";\n      /*prevent hand spin when it flips to 90 deg*/\n    } else {\n      secondHand.style.transition = \"all 0.05s cubic-bezier(0.1, 2.7, 0.58, 1)\";\n    }\n\n    secondHand.style.transform = `rotate(${secondsDegrees}deg)`;\n    const minutes = now.getMinutes();\n    const minutesDegrees = minutes / 60 * 360 + seconds / 60 * 6 + 90;\n    minuteHand.style.transform = `rotate(${minutesDegrees}deg)`;\n    const hours = now.getHours();\n    const hoursDegrees = hours / 12 * 360 + minutes / 60 * 30 + 90;\n    hourHand.style.transform = `rotate(${hoursDegrees}deg)`;\n    const hora_marcaje = hours + \":\" + minutes + \":\" + seconds;\n    IngresoDatos(codigo_barra, hora_marcaje);\n  }\n\n  setInterval(setDate, 1000); //runs setDate every Second\n  //Hook para recibir el codigo de barra\n\n  const [codigo_barra, setCodigo_Barra] = useState(\"\"); //hace focus al texbox que obtendrá la variable del codigo barras\n\n  const focusDiv = useRef(null);\n  useEffect(() => {\n    const focusPermanente = setInterval(() => {\n      //selecciona el texto del input \n      focusDiv.current.blur();\n      if (focusDiv.current) focusDiv.current.focus();\n    }, 500);\n    return () => clearInterval(focusPermanente);\n  }, [focusDiv]); //Funcion para llamar a UseEffect y recarge la pagina cada 5 min\n\n  const HandlerOne = e => {\n    setControlador1('Inicia Request al Backend');\n    setTimeout(() => {\n      setControlador1('1');\n    }, 300000); //5 min aprox\n  }; //9min = 500000\n  //17min = 1000000\n\n\n  useEffect(() => {\n    if (controlador1 === '1') {\n      window.location.href = window.location.href;\n    }\n  }, [controlador1]); //seleccionar todo el contenido del txt\n\n  const handleFocus = event => event.target.select(); //insertar datos\n\n\n  const IngresoDatos = (codigo_barra, hora_marcaje) => {\n    Axios.post('http://localhost:5000/apis/rrh/registrar/registrarMarcaje/' + fecha_marcaje + '/' + hora_marcaje + '/' + codigo_barra, {}).then(() => {\n      console.log(\"conexion exitosa\");\n      console.log(\"Ingreso Realizado\");\n    });\n  }; //\n  //insertar datos\n\n\n  const Bitacora = () => {\n    Axios.post('http://localhost:5000/apis/rrh/registrar/registrarBitacoraMarcaje/' + fecha_marcaje + '/' + hora_marcaje + '/' + codigo_barra, {}).then(() => {\n      console.log(\"Registro Bitacora\");\n    });\n  }; //\n\n\n  const ActualizarDatosHraSalida = codigo_barra => {\n    Axios.put('http://localhost:5000/apis/rrh/actualizar/actualizarHraSalidaMarcaje/' + codigo_barra + '/' + hora_marcaje + '/' + fecha_marcaje, {}).then(() => {\n      console.log(\"Dato Actualizado\");\n    });\n  }; //\n\n\n  const BusquedaEmpleado = () => {\n    axios.get('http://localhost:5000/apis/rrh/buscar/obtenerEmpleado/' + codigo_barra).then(result => {\n      //condicional para verificar si existe el dato en la BD\n      if (result.data.length > 0) {\n        //Se agrega el nombre y apellido para luego mostrarlos en pantalla\n        setMensajeNombre(result.data[0].nombre);\n        setMensajeApellido(result.data[0].apellido); //console.log(\"Empleado Encontrado: \"+ result.data[0].nombre)\n\n        BuscarFechaActual();\n      } else {\n        setMensajeNombre(\"Empleado No Encontrado\");\n        setMensajeApellido(\"\");\n      }\n    }).catch(console.log());\n  }; //buscar datos\n\n\n  const BusquedaFechaExistente = () => {\n    Axios.get('http://localhost:5000/apis/rrh/buscar/obtenerFechaExistente/' + codigo_barra + '/' + fecha_marcaje).then(result => {\n      if (result.data.length > 0) {\n        console.log(\"Fecha Existente Encontrada\");\n        ActualizarDatosHraSalida(codigo_barra);\n        Bitacora();\n      } else {\n        //Fecha que contiene NULL en hra salida \n        console.log(\"Fecha Existente No Encontrada\");\n        setDate(); //IngresoDatos(codigo_barra);\n      }\n    });\n  }; //\n  //buscar datos\n\n\n  const BuscarFechaActual = () => {\n    Axios.get('http://localhost:5000/apis/rrh/buscar/obtenerFechaMarcaje/' + codigo_barra + '/' + fecha_marcaje).then(result => {\n      //condicional para verificar si existe el dato en la BD\n      if (result.data.length > 0) {\n        console.log(\"Existe Fecha Anterior Registrada\");\n        BusquedaFechaExistente();\n      } else {\n        //No Existe el dato en la busqueda\n        //Se inserta un nuevo Registro con Hora Entrada\n        console.log(\"Nuevo Registro de Hra Entrada\");\n        console.log(\"Ingreso Marcaje: 0\");\n        IngresoDatos(codigo_barra);\n        Bitacora();\n      }\n    }).catch(console.log());\n  }; //\n\n  /*\r\n  const CalculoTiempoDiario =(HoraEnt, HraSal)=>{\r\n  console.log(\"Hora E: \" + HoraEnt);\r\n  console.log(\"Hora S: \" + HraSal);\r\n    var ObtieneHraFinal = (HraSal);\r\n  var ObtieneHraInicial = (HoraEnt);\r\n    var HoraFinal = (ObtieneHraFinal).split(\":\"),\r\n      HoraInicial = (ObtieneHraInicial).split(\":\"),\r\n      TiempoMayor = new Date(),\r\n      TiempoMenor = new Date();\r\n  //Se establecen en arreglos los 3 parametros\r\n  TiempoMayor.setHours(HoraFinal[0], HoraFinal[1], HoraFinal[2]);\r\n  TiempoMenor.setHours(HoraInicial[0], HoraInicial[1], HoraInicial[2]);\r\n  //Calculo de tiempo laborado diariamente\r\n  TiempoMayor.setHours(TiempoMayor.getHours() - TiempoMenor.getHours(), TiempoMayor.getMinutes() - TiempoMenor.getMinutes(), TiempoMayor.getSeconds() - TiempoMenor.getSeconds());\r\n  var Horas =TiempoMayor.getHours();\r\n  var Minutos =TiempoMayor.getMinutes();\r\n  var Segundos =TiempoMayor.getSeconds();\r\n  //Se agregan los 0's faltantes \r\n  if (Horas<10){Horas=\"0\"+Horas;}\r\n  if (Minutos<10){Minutos=\"0\"+Minutos;}\r\n  if (Segundos<10){Segundos=\"0\"+Segundos;}\r\n  var HrasLaboradas = Horas + \":\"+ Minutos + \":\"+ Segundos;\r\n  console.log(\"Horas Laboradas: \" + Horas + \":\"+ Minutos + \":\"+ Segundos);\r\n  ActualizarDatosTiempoLaborado(codigo_barra,HrasLaboradas);\r\n  }*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"img_logo\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reloj\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Reloj, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nombre_emp\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [mensajeNombre, \" \", mensajeApellido]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"codigo_barra\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"codigo\",\n        ref: focusDiv,\n        onKeyDown: e => Captura(e),\n        onFocus: handleFocus,\n        onChange: event => {\n          setCodigo_Barra(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"lF/VOplyWhxiRHq92uDDKbO3kzU=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UseAsyncState\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/agarcia/marcaje/cliente/src/App.js"],"names":["React","Component","useEffect","useRef","useState","logo","Reloj","Axios","axios","UseAsyncState","initialValue","value","setValue","setter","x","Promise","resolve","App","date","Date","dia_marcaje","getDate","mes_marcaje","getMonth","periodo_marcaje","getFullYear","fecha_marcaje","mensajeNombre","setMensajeNombre","mensajeApellido","setMensajeApellido","controlador1","setControlador1","state","setState","Captura","event","key","BusquedaEmpleado","HandlerOne","setDate","now","seconds","getSeconds","secondsDegrees","secondHand","style","transition","transform","minutes","getMinutes","minutesDegrees","minuteHand","hours","getHours","hoursDegrees","hourHand","hora_marcaje","IngresoDatos","codigo_barra","setInterval","setCodigo_Barra","focusDiv","focusPermanente","current","blur","focus","clearInterval","e","setTimeout","window","location","href","handleFocus","target","select","post","then","console","log","Bitacora","ActualizarDatosHraSalida","put","get","result","data","length","nombre","apellido","BuscarFechaActual","catch","BusquedaFechaExistente"],"mappings":"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","sourcesContent":["import React, {Component,useEffect, useRef, useState} from 'react';\r\nimport logo from './img/logo.jpg';\r\nimport Reloj from './componentes/Reloj';\r\nimport Axios from 'axios'\r\nimport './css/App.css';\r\nimport axios from 'axios';\r\n//import { findAllByTestId } from '@testing-library/react';\r\n\r\n\r\nfunction UseAsyncState(initialValue) {\r\n  const [value, setValue] = useState(initialValue);\r\n  const setter = x =>\r\n    new Promise(resolve => {\r\n      setValue(x);\r\n      resolve(x);\r\n    });\r\n  return [value, setter];\r\n}\r\n\r\nfunction App (){\r\n//variables para obtener la fecha y hora\r\nconst date = new Date();\r\nconst dia_marcaje = date.getDate();\r\nconst mes_marcaje = (date.getMonth()+1);\r\nconst periodo_marcaje = date.getFullYear();\r\nconst fecha_marcaje = (periodo_marcaje +\"-\"+ mes_marcaje+\"-\"+dia_marcaje);\r\n\r\n\r\n\r\n//const hora_marcaje = date.toLocaleTimeString();\r\n//Hooks para mostrar el nombre y apellido en pantalla\r\nconst[mensajeNombre, setMensajeNombre] =UseAsyncState(\"\");\r\nconst[mensajeApellido, setMensajeApellido] =UseAsyncState(\"\");\r\n//Hook para recargar la pantalla\r\nconst[controlador1, setControlador1]=useState(\"\");\r\n\r\n\r\n//Hook para el focus permanente\r\n  const [state, setState] = useState('');\r\n\r\n  const Captura = (event) => {  \r\n    //condicion para la busqueda e ingreso de datos cuando el lector manda la señal\r\n    if(event.key==='Enter'){\r\n    //se cambia el estado al nombre de la tecla que es presionada, en este caso es la tecla enter\r\n    setControlador1('0')\r\n      setState(event.key);\r\n      //se llama a la funcion \r\n      BusquedaEmpleado();\r\n    }else{\r\n      //funcion para recargar la pagina luego de 5 min\r\n      HandlerOne();\r\n    }\r\n  };\r\n////////\r\n\r\nfunction setDate(){\r\n  const now = new Date();\r\n  const seconds = now.getSeconds();\r\n  const secondsDegrees =(( seconds / 60) * 360) + 90;\r\n  if(secondsDegrees == 90){\r\n  secondHand.style.transition = \"\"; /*prevent hand spin when it flips to 90 deg*/\r\n  }\r\n  else{\r\n  secondHand.style.transition = \"all 0.05s cubic-bezier(0.1, 2.7, 0.58, 1)\";\r\n  }\r\n  secondHand.style.transform = `rotate(${secondsDegrees}deg)`;\r\n  \r\n  const minutes = now.getMinutes();\r\n  const minutesDegrees = (( minutes / 60) * 360) + ((seconds/60)*6)  + 90;\r\n  minuteHand.style.transform = `rotate(${minutesDegrees}deg)`;  \r\n  \r\n  \r\n  const hours = now.getHours();\r\n  const hoursDegrees = (( hours / 12) * 360) + ((minutes/60)*30) + 90;\r\n  hourHand.style.transform = `rotate(${hoursDegrees}deg)`; \r\n  const hora_marcaje = (hours + \":\" + minutes + \":\" + seconds);\r\n  IngresoDatos(codigo_barra,hora_marcaje);\r\n  }\r\n\r\n  setInterval(setDate, 1000); //runs setDate every Second\r\n\r\n//Hook para recibir el codigo de barra\r\nconst [codigo_barra, setCodigo_Barra] = useState(\"\");\r\n\r\n//hace focus al texbox que obtendrá la variable del codigo barras\r\nconst focusDiv = useRef(null);\r\nuseEffect(()=>{\r\n  const focusPermanente = setInterval (()=>{\r\n    //selecciona el texto del input \r\n    focusDiv.current.blur();\r\n    if(focusDiv.current)focusDiv.current.focus();\r\n  },500);\r\n  return()=>clearInterval(focusPermanente);\r\n},[focusDiv]);\r\n\r\n\r\n//Funcion para llamar a UseEffect y recarge la pagina cada 5 min\r\nconst HandlerOne=(e)=>{\r\n   setControlador1('Inicia Request al Backend');\r\n setTimeout(()=>{\r\n   setControlador1('1')\r\n },300000)//5 min aprox\r\n }\r\n \r\n //9min = 500000\r\n //17min = 1000000\r\n \r\n useEffect(()=>{\r\n   if(controlador1 === '1'){\r\n    window.location.href = window.location.href;\r\n   }\r\n },[controlador1])\r\n\r\n \r\n//seleccionar todo el contenido del txt\r\nconst handleFocus = (event) => event.target.select();\r\n\r\n//insertar datos\r\nconst IngresoDatos =(codigo_barra,hora_marcaje)=>{\r\n  Axios.post('http://localhost:5000/apis/rrh/registrar/registrarMarcaje/'+ fecha_marcaje + '/' + hora_marcaje + '/' + codigo_barra, {    \r\n\r\n}).then(()=>{\r\n\r\nconsole.log(\"conexion exitosa\");\r\nconsole.log(\"Ingreso Realizado\");\r\n\r\n  });\r\n};\r\n//\r\n\r\n//insertar datos\r\nconst Bitacora =()=>{\r\n  Axios.post('http://localhost:5000/apis/rrh/registrar/registrarBitacoraMarcaje/'+ fecha_marcaje + '/' + hora_marcaje + '/' + codigo_barra, {    \r\n}).then(()=>{\r\nconsole.log(\"Registro Bitacora\")\r\n  });\r\n};\r\n//\r\n\r\nconst ActualizarDatosHraSalida = (codigo_barra)=>{\r\n\r\n  Axios.put('http://localhost:5000/apis/rrh/actualizar/actualizarHraSalidaMarcaje/'+ codigo_barra + '/' + hora_marcaje + '/' + fecha_marcaje,{\r\n  }).then(()=>{\r\n   console.log(\"Dato Actualizado\")\r\n  });  \r\n};\r\n//\r\n\r\nconst BusquedaEmpleado = () =>{\r\n  axios.get('http://localhost:5000/apis/rrh/buscar/obtenerEmpleado/' + codigo_barra).then\r\n  (result=>{\r\n//condicional para verificar si existe el dato en la BD\r\n     if(result.data.length > 0){\r\n      //Se agrega el nombre y apellido para luego mostrarlos en pantalla\r\n      setMensajeNombre(result.data[0].nombre)\r\n      setMensajeApellido(result.data[0].apellido)\r\n    //console.log(\"Empleado Encontrado: \"+ result.data[0].nombre)\r\n    BuscarFechaActual();\r\n      \r\n  }else{ \r\n      setMensajeNombre(\"Empleado No Encontrado\")\r\n      setMensajeApellido(\"\")\r\n  }\r\n  \r\n}).catch\r\n  (console.log())\r\n  }\r\n\r\n\r\n//buscar datos\r\nconst BusquedaFechaExistente = () => {\r\n  Axios.get('http://localhost:5000/apis/rrh/buscar/obtenerFechaExistente/'+ codigo_barra + '/' + fecha_marcaje).then\r\n\r\n  (result=>{\r\n\r\n    if(result.data.length > 0){\r\n\r\n      console.log(\"Fecha Existente Encontrada\")\r\n      ActualizarDatosHraSalida(codigo_barra);\r\n      Bitacora();\r\n\r\n       }else{\r\n      //Fecha que contiene NULL en hra salida \r\n      console.log(\"Fecha Existente No Encontrada\")\r\n      setDate();\r\n      \r\n      //IngresoDatos(codigo_barra);\r\n       }\r\n\r\n       });\r\n    };\r\n//\r\n\r\n//buscar datos\r\nconst BuscarFechaActual = () => {\r\n  Axios.get('http://localhost:5000/apis/rrh/buscar/obtenerFechaMarcaje/'+ codigo_barra +'/'+ fecha_marcaje).then\r\n  (result=>{\r\n    //condicional para verificar si existe el dato en la BD\r\n         if(result.data.length > 0){\r\n           console.log(\"Existe Fecha Anterior Registrada\")\r\n          BusquedaFechaExistente();\r\n          \r\n      }else{ \r\n        //No Existe el dato en la busqueda\r\n        //Se inserta un nuevo Registro con Hora Entrada\r\n        console.log(\"Nuevo Registro de Hra Entrada\")\r\n        console.log(\"Ingreso Marcaje: 0\");\r\n        IngresoDatos(codigo_barra);\r\n        Bitacora();\r\n      }\r\n      \r\n    }).catch\r\n      (console.log())\r\n      }\r\n\r\n  //\r\n  /*\r\nconst CalculoTiempoDiario =(HoraEnt, HraSal)=>{\r\n  console.log(\"Hora E: \" + HoraEnt);\r\n  console.log(\"Hora S: \" + HraSal);\r\n\r\n  var ObtieneHraFinal = (HraSal);\r\n  var ObtieneHraInicial = (HoraEnt);\r\n\r\n  var HoraFinal = (ObtieneHraFinal).split(\":\"),\r\n      HoraInicial = (ObtieneHraInicial).split(\":\"),\r\n      TiempoMayor = new Date(),\r\n      TiempoMenor = new Date();\r\n\r\n//Se establecen en arreglos los 3 parametros\r\nTiempoMayor.setHours(HoraFinal[0], HoraFinal[1], HoraFinal[2]);\r\nTiempoMenor.setHours(HoraInicial[0], HoraInicial[1], HoraInicial[2]);\r\n//Calculo de tiempo laborado diariamente\r\nTiempoMayor.setHours(TiempoMayor.getHours() - TiempoMenor.getHours(), TiempoMayor.getMinutes() - TiempoMenor.getMinutes(), TiempoMayor.getSeconds() - TiempoMenor.getSeconds());\r\n\r\nvar Horas =TiempoMayor.getHours();\r\nvar Minutos =TiempoMayor.getMinutes();\r\nvar Segundos =TiempoMayor.getSeconds();\r\n//Se agregan los 0's faltantes \r\nif (Horas<10){Horas=\"0\"+Horas;}\r\nif (Minutos<10){Minutos=\"0\"+Minutos;}\r\nif (Segundos<10){Segundos=\"0\"+Segundos;}\r\nvar HrasLaboradas = Horas + \":\"+ Minutos + \":\"+ Segundos;\r\nconsole.log(\"Horas Laboradas: \" + Horas + \":\"+ Minutos + \":\"+ Segundos);\r\n\r\nActualizarDatosTiempoLaborado(codigo_barra,HrasLaboradas);\r\n\r\n}*/\r\n\r\n  return(\r\n    <main>\r\n    <div className =\"img_logo\">\r\n      <img src={logo}/>\r\n    </div>\r\n    <div className=\"reloj\">\r\n      <div>\r\n      <Reloj></Reloj>\r\n      </div>\r\n    </div>\r\n    <div className=\"nombre_emp\">\r\n    <h1>{mensajeNombre} {mensajeApellido}</h1>\r\n    </div>\r\n      <div className=\"codigo_barra\">\r\n        <input type=\"text\" placeholder='codigo' ref={focusDiv}   onKeyDown={(e) => Captura(e)}  onFocus={handleFocus} onChange={(event) => {setCodigo_Barra(event.target.value);}}/>\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\n  export default App;"]},"metadata":{},"sourceType":"module"}