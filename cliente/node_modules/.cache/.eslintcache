[{"C:\\Users\\agarcia\\marcaje\\cliente\\src\\index.js":"1","C:\\Users\\agarcia\\marcaje\\cliente\\src\\reportWebVitals.js":"2","C:\\Users\\agarcia\\marcaje\\cliente\\src\\App.js":"3","C:\\Users\\agarcia\\marcaje\\cliente\\src\\componentes\\Reloj.js":"4","C:\\Users\\agarcia\\marcaje\\cliente\\src\\componentes\\Detectar_Click.js":"5"},{"size":521,"mtime":1646686949929,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1646686949929,"results":"8","hashOfConfig":"7"},{"size":11168,"mtime":1648073011940,"results":"9","hashOfConfig":"7"},{"size":955,"mtime":1647901538725,"results":"10","hashOfConfig":"7"},{"size":916,"mtime":1644428310773,"results":"11","hashOfConfig":"12"},{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2yvu7k",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"4wiv19","C:\\Users\\agarcia\\marcaje\\cliente\\src\\index.js",[],[],"C:\\Users\\agarcia\\marcaje\\cliente\\src\\reportWebVitals.js",[],[],"C:\\Users\\agarcia\\marcaje\\cliente\\src\\App.js",["30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45"],[],"import React, {Component,useEffect, useRef, useState} from 'react';\r\nimport logo from './img/logo.jpg';\r\nimport Reloj from './componentes/Reloj';\r\nimport Axios from 'axios'\r\nimport './css/App.css';\r\nimport { findAllByTestId } from '@testing-library/react';\r\n\r\n\r\n//aumentar el tiempo que aparece el texto\r\n//revisar lo de los periodos para marcaje y usar ifs para saber donde ubicar donde iria el marcaje\r\n//esto ultimo hacerlo con ifs\r\n\r\n\r\n\r\nfunction useAsyncState(initialValue) {\r\n  const [value, setValue] = useState(initialValue);\r\n  const setter = x =>\r\n    new Promise(resolve => {\r\n      setValue(x);\r\n      resolve(x);\r\n    });\r\n  return [value, setter];\r\n}\r\n\r\n\r\nfunction App (){\r\n  \r\nconst date = new Date();\r\n\r\nconst[mensajeNombre, setMensajeNombre] =useAsyncState(\"\");\r\nconst[mensajeApellido, setMensajeApellido] =useAsyncState(\"\");\r\n//puede servir a futuro\r\nconst[mensajeHoraEnt, setMensajeHoraEnt] =useAsyncState(\"\");\r\nconst[mensajeHoraSal, setMensajeHoraSal] =useAsyncState(\"\");\r\nconst[mensajeHoraEntAlm, setMensajeHoraEntAlm] =useAsyncState(\"\");\r\nconst[mensajeHoraSalAlm, setMensajeHoraSalAlm] =useAsyncState(\"\");\r\n//\r\nconst[controlador1, setControlador1]=useAsyncState(\"\");\r\nconst[controlador2, setControlador2]=useAsyncState(\"\");\r\nconst[controlador3, setControlador3]=useAsyncState(\"\");\r\nconst[controlador4, setControlador4]=useAsyncState(\"\");\r\nconst[controlador5, setControlador5]=useAsyncState(\"\");\r\n\r\n\r\n  //////\r\n  const [state, setState] = useState('');\r\n\r\n  const captura = (event) => {  \r\n      \r\n    //condicion para la busqueda e ingreso de datos cuando el lector manda la señal\r\n    if(event.key==='Enter'){\r\n    //se cambia el estado al nombre de la tecla que es presionada, en este caso es la tecla enter\r\n      setState(event.key);\r\n      //se llama a la funcion \r\n      BusquedaEmpleado();\r\n    }\r\n  };\r\n////////\r\n\r\n//se declaran variables para envío de datos del MVC\r\nconst [codigo_barra, setCodigo_Barra] = useState(\"\");\r\n\r\n \r\n//hace focus al texbox que obtendrá la variable del codigo barras\r\nconst focusDiv = useRef(null);\r\nuseEffect(()=>{\r\n  const focusPermanente = setInterval (()=>{\r\n    //selecciona el texto del input \r\n    focusDiv.current.blur();\r\n    if(focusDiv.current)focusDiv.current.focus();\r\n  },500);\r\n  return()=>clearInterval(focusPermanente);\r\n},[focusDiv]);\r\n\r\n\r\n//seleccionar todo el contenido \r\nconst handleFocus = (event) => event.target.select();\r\n\r\nconst HandlerOne=(e)=>{\r\n  // e.preventDefault();\r\n   setControlador1('Inicia Request al Backend');\r\n setTimeout(()=>{\r\n   setControlador1('1')\r\n },500)\r\n }\r\n useEffect(()=>{\r\n  if(controlador1 === '1'){\r\n    \r\n    \r\n  }\r\n},[controlador1])\r\n\r\nconst HandlerTwo=(e)=>{\r\n  // e.preventDefault();\r\n   setControlador2('Inicia Request al Backend');\r\n setTimeout(()=>{\r\n   setControlador2('2')\r\n },500)\r\n }\r\n useEffect(()=>{\r\n   if(controlador2 === '2'){\r\n    \r\n     \r\n   }\r\n },[controlador2])\r\n\r\n\r\n const HandlerThree=(e)=>{\r\n  //e.preventDefault();\r\n  setControlador3('Inicia Request al Backend');\r\nsetTimeout(()=>{\r\n  setControlador3('3')\r\n\r\n},500)\r\n}\r\nuseEffect(()=>{\r\n  if(controlador3 === '3'){\r\n    \r\n  \r\n    \r\n  }\r\n},[controlador3])\r\n\r\n\r\nconst HandlerFour=(e)=>{\r\n // e.preventDefault();\r\n  setControlador4('Inicia Request al Backend');\r\nsetTimeout(()=>{\r\n  setControlador4('4')\r\n},500)\r\n}\r\nuseEffect(()=>{\r\n  if(controlador4 === '4'){\r\n    \r\n\r\n  }\r\n},[controlador4])\r\n\r\nconst HandlerFive=(e)=>{\r\n  // e.preventDefault();\r\n   setControlador5('Inicia Request al Backend');\r\n setTimeout(()=>{\r\n   setControlador5('5')\r\n },3000)\r\n }\r\n useEffect(()=>{\r\n   if(controlador5 === '5'){\r\n    //document.getElementById(\"myForm\").reset();\r\n\r\n     window.location.href = window.location.href;\r\n   }\r\n },[controlador5])\r\n\r\n\r\n\r\n\r\n//insertar datos\r\nconst ingresoDatos =()=>{\r\n  Axios.post('http://localhost:3001/DatosMarcajeEmpleado', {    \r\n\r\n    \r\n    codigo_barra: codigo_barra,\r\n    hora_marcaje:date.toLocaleTimeString(),\r\n    //se llama a la fecha \r\n    dia_marcaje: date.getDate(),\r\n    mes_marcaje: (date.getMonth()+1),\r\n    periodo_marcaje: date.getFullYear(),\r\n}).then(()=>{\r\n \r\n\r\n  \r\nconsole.log(date.toLocaleString());\r\nconsole.log(\"conexion exitosa\");\r\nconsole.log(\"hora:\");\r\nconsole.log(date.toLocaleTimeString());\r\nconsole.log(date.getDate() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getFullYear());\r\n//refresca la pagina para liberar el cargado de memoria de las variables usadas\r\n//window.location.href = window.location.href;\r\n  });\r\n};\r\n//\r\n\r\n\r\n//insertar datos\r\nconst Bitacora =()=>{\r\n  Axios.post('http://localhost:3001/bitacora', {    \r\n    codigo_barra: codigo_barra,\r\n    //se llama a la fecha y obtiene solamente la hora\r\n    hora_marcaje:date.toLocaleTimeString(),\r\n    dia_marcaje: date.getDate(),\r\n    mes_marcaje: (date.getMonth()+1),\r\n    periodo_marcaje: date.getFullYear(),\r\n}).then(()=>{\r\n\r\n  });\r\n};\r\n//\r\n\r\n\r\n//\r\nconst ActualizarDatosHraSalidaAlm = (codigo_barra)=>{\r\n\r\n  Axios.put('http://localhost:3001/actualizarHraSalidaAlm',{\r\n    codigo_barra:codigo_barra,\r\n    hora_marcaje:date.toLocaleTimeString(),\r\n    dia_marcaje: date.getDate(),\r\n    mes_marcaje: (date.getMonth()+1),\r\n    periodo_marcaje: date.getFullYear(),\r\n  \r\n  }).then(()=>{\r\n\r\n    //window.location.href = window.location.href;\r\n    \r\n  });  \r\n};\r\n\r\nconst ActualizarDatosHraEntradaAlm = (codigo_barra)=>{\r\n\r\n  Axios.put('http://localhost:3001/actualizarHraEntradaAlm',{\r\n    codigo_barra:codigo_barra,\r\n    hora_marcaje:date.toLocaleTimeString(),\r\n\r\n    dia_marcaje: date.getDate(),\r\n    mes_marcaje: (date.getMonth()+1),\r\n    periodo_marcaje: date.getFullYear(),\r\n\r\n  }).then(()=>{\r\n    //window.location.href = window.location.href;\r\n    \r\n\r\n  \r\n  });  \r\n};\r\n\r\nconst ActualizarDatosHraSalida = (codigo_barra)=>{\r\n\r\n  Axios.put('http://localhost:3001/actualizarHraSalida',{\r\n    codigo_barra:codigo_barra,\r\n    hora_marcaje:date.toLocaleTimeString(),\r\n\r\n    dia_marcaje: date.getDate(),\r\n    mes_marcaje: (date.getMonth()+1),\r\n    periodo_marcaje: date.getFullYear(),\r\n\r\n  }).then(()=>{\r\n  \r\n   BusquedaEmpleado();\r\n  });  \r\n};\r\n//\r\n\r\nconst ActualizarDatosTiempoLaborado = (codigo_barra,tiempo_laborado)=>{\r\n\r\n  Axios.put('http://localhost:3001/agregarTiempoLaborado',{\r\n    codigo_barra:codigo_barra,\r\n    tiempo_laborado:tiempo_laborado\r\n\r\n  }).then(()=>{\r\n   \r\n  });  \r\n};\r\n//\r\n\r\n\r\n//buscar datos\r\nconst BusquedaEmpleado = () => {\r\n  Axios.post('http://localhost:3001/buscarEmpleado',{\r\n    codigo_barra:codigo_barra,\r\n\r\n}).then((response)=>{\r\n\r\n    if(response.data.message){\r\n        //muestra mensaje de Empleado no encontrado\r\n        setMensajeNombre(response.data.message)\r\n        setMensajeApellido(\"\")\r\n      \r\n       }else{\r\n\r\n        BuscarFechaActual();\r\n        setMensajeNombre(response.data[0].nombre)\r\n        setMensajeApellido(response.data[0].apellido)\r\n       }\r\n\r\n       });\r\n    };\r\n//\r\n\r\n//buscar datos\r\nconst BuscarFechaActual = () => {\r\n    Axios.post('http://localhost:3001/buscarFecha',{\r\n        codigo_barra:codigo_barra,\r\n        dia_marcaje: date.getDate(),\r\n        mes_marcaje: (date.getMonth()+1),\r\n        periodo_marcaje: date.getFullYear(),\r\n\r\n  }).then((response)=>{\r\n  \r\n     \r\n\r\n    if(response.data.message){\r\n    \r\n        //Se inserta Hora Entrada\r\n        console.log(\"Ingreso Marcaje: 0\");\r\n        ingresoDatos(codigo_barra);\r\n        \r\n        Bitacora();\r\n        \r\n\r\n       }else{\r\n\r\n        \r\n           if (response.data[0].hra_entrada != null && response.data[0].hra_salida_alm == null && response.data[0].hra_entrada_alm == null && response.data[0].hra_salida == null){\r\n         console.log(\"Ingreso mensaje hora Salida Almuerzo: 1\");\r\n         ActualizarDatosHraSalidaAlm(codigo_barra);\r\n        \r\n             Bitacora();\r\n         }else{\r\n           if(response.data[0].hra_entrada != null && response.data[0].hra_salida_alm != null && response.data[0].hra_entrada_alm == null && response.data[0].hra_salida == null){\r\n             console.log(\"Ingreso mensaje hora Entrada Almuerzo: 2\");\r\n             ActualizarDatosHraEntradaAlm(codigo_barra);\r\n           \r\n           \r\n             Bitacora();\r\n         }else{\r\n           if(response.data[0].hra_entrada != null && response.data[0].hra_salida_alm != null && response.data[0].hra_entrada_alm != null && response.data[0].hra_salida == null){\r\n             console.log(\"Ingreso mensaje hora Salida: 3\");\r\n             ActualizarDatosHraSalida(codigo_barra);\r\n      \r\n             \r\n             //CalculoTiempoDiario(response.data[0].hra_entrada,response.data[0].hra_salida);\r\n             Bitacora();\r\n             \r\n             }else{\r\n               if(response.data[0].hra_entrada != null && response.data[0].hra_salida_alm != null && response.data[0].hra_entrada_alm != null && response.data[0].hra_salida != null){\r\n                 \r\n                 console.log(\"Ya se han realizado todos los marcajes del día\")\r\n                 //setMensajeApellido(\"\")\r\n                \r\n                 CalculoTiempoDiario(response.data[0].hra_entrada,response.data[0].hra_salida);\r\n                 setMensajeHoraEnt(response.data[0].hra_entrada);\r\n                 setMensajeHoraSal(response.data[0].hra_salida);\r\n            \r\n               \r\n               }else{\r\n                 console.log(\"El empleado ha realizado un marcaje erróneo \");\r\n                 \r\n               }\r\n             }\r\n           }\r\n         }\r\n         \r\n          }\r\n        \r\n    });\r\n  };\r\n  //\r\n\r\n//\r\nconst CalculoTiempoDiario =(HoraEnt, HraSal)=>{\r\n  console.log(\"Hora E: \" + HoraEnt);\r\n  console.log(\"Hora S: \" + HraSal);\r\n\r\n  var ObtieneHraFinal = (HraSal);\r\n  var ObtieneHraInicial = (HoraEnt);\r\n\r\n  var HoraFinal = (ObtieneHraFinal).split(\":\"),\r\n      HoraInicial = (ObtieneHraInicial).split(\":\"),\r\n      TiempoMayor = new Date(),\r\n      TiempoMenor = new Date();\r\n\r\n//Se establecen en arreglos los 3 parametros\r\nTiempoMayor.setHours(HoraFinal[0], HoraFinal[1], HoraFinal[2]);\r\nTiempoMenor.setHours(HoraInicial[0], HoraInicial[1], HoraInicial[2]);\r\n//Calculo de tiempo laborado diariamente\r\nTiempoMayor.setHours(TiempoMayor.getHours() - TiempoMenor.getHours(), TiempoMayor.getMinutes() - TiempoMenor.getMinutes(), TiempoMayor.getSeconds() - TiempoMenor.getSeconds());\r\n\r\nvar Horas =TiempoMayor.getHours();\r\nvar Minutos =TiempoMayor.getMinutes();\r\nvar Segundos =TiempoMayor.getSeconds();\r\nif (Horas<10){Horas=\"0\"+Horas;}\r\nif (Minutos<10){Minutos=\"0\"+Minutos;}\r\nif (Segundos<10){Segundos=\"0\"+Segundos;}\r\nvar HrasLaboradas = Horas + \":\"+ Minutos + \":\"+ Segundos;\r\nconsole.log(\"Horas Laboradas: \" + Horas + \":\"+ Minutos + \":\"+ Segundos);\r\n\r\nActualizarDatosTiempoLaborado(codigo_barra,HrasLaboradas);\r\n\r\n}\r\n\r\n  return(\r\n    <main>\r\n    <div className =\"img_logo\">\r\n      <img src={logo}/>\r\n    </div>\r\n    <div className=\"reloj\">\r\n      <div>\r\n      <Reloj></Reloj>\r\n      </div>\r\n    </div>\r\n    <div className=\"nombre_emp\">\r\n    <h1>{mensajeNombre} {mensajeApellido}</h1>\r\n    </div>\r\n      <div className=\"codigo_barra\">\r\n        <input type=\"text\" placeholder='codigo' ref={focusDiv}   onKeyDown={(e) => captura(e)}  onFocus={handleFocus} onChange={(event) => {setCodigo_Barra(event.target.value);}}/>\r\n      </div>  \r\n    </main>\r\n  )\r\n}\r\n\r\n  export default App;","C:\\Users\\agarcia\\marcaje\\cliente\\src\\componentes\\Reloj.js",[],[],"C:\\Users\\agarcia\\marcaje\\cliente\\src\\componentes\\Detectar_Click.js",[],[],["46","47"],{"ruleId":"48","severity":1,"message":"49","line":1,"column":16,"nodeType":"50","messageId":"51","endLine":1,"endColumn":25},{"ruleId":"48","severity":1,"message":"52","line":6,"column":10,"nodeType":"50","messageId":"51","endLine":6,"endColumn":25},{"ruleId":"48","severity":1,"message":"53","line":33,"column":7,"nodeType":"50","messageId":"51","endLine":33,"endColumn":21},{"ruleId":"48","severity":1,"message":"54","line":34,"column":7,"nodeType":"50","messageId":"51","endLine":34,"endColumn":21},{"ruleId":"48","severity":1,"message":"55","line":35,"column":7,"nodeType":"50","messageId":"51","endLine":35,"endColumn":24},{"ruleId":"48","severity":1,"message":"56","line":35,"column":26,"nodeType":"50","messageId":"51","endLine":35,"endColumn":46},{"ruleId":"48","severity":1,"message":"57","line":36,"column":7,"nodeType":"50","messageId":"51","endLine":36,"endColumn":24},{"ruleId":"48","severity":1,"message":"58","line":36,"column":26,"nodeType":"50","messageId":"51","endLine":36,"endColumn":46},{"ruleId":"48","severity":1,"message":"59","line":46,"column":10,"nodeType":"50","messageId":"51","endLine":46,"endColumn":15},{"ruleId":"48","severity":1,"message":"60","line":79,"column":7,"nodeType":"50","messageId":"51","endLine":79,"endColumn":17},{"ruleId":"48","severity":1,"message":"61","line":93,"column":7,"nodeType":"50","messageId":"51","endLine":93,"endColumn":17},{"ruleId":"48","severity":1,"message":"62","line":108,"column":8,"nodeType":"50","messageId":"51","endLine":108,"endColumn":20},{"ruleId":"48","severity":1,"message":"63","line":125,"column":7,"nodeType":"50","messageId":"51","endLine":125,"endColumn":18},{"ruleId":"48","severity":1,"message":"64","line":139,"column":7,"nodeType":"50","messageId":"51","endLine":139,"endColumn":18},{"ruleId":"65","severity":1,"message":"66","line":150,"column":29,"nodeType":"67","messageId":"68","endLine":150,"endColumn":49},{"ruleId":"69","severity":1,"message":"70","line":393,"column":7,"nodeType":"71","endLine":393,"endColumn":24},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'findAllByTestId' is defined but never used.","'mensajeHoraEnt' is assigned a value but never used.","'mensajeHoraSal' is assigned a value but never used.","'mensajeHoraEntAlm' is assigned a value but never used.","'setMensajeHoraEntAlm' is assigned a value but never used.","'mensajeHoraSalAlm' is assigned a value but never used.","'setMensajeHoraSalAlm' is assigned a value but never used.","'state' is assigned a value but never used.","'HandlerOne' is assigned a value but never used.","'HandlerTwo' is assigned a value but never used.","'HandlerThree' is assigned a value but never used.","'HandlerFour' is assigned a value but never used.","'HandlerFive' is assigned a value but never used.","no-self-assign","'window.location.href' is assigned to itself.","MemberExpression","selfAssignment","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-global-assign","no-unsafe-negation"]