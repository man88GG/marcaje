[{"C:\\Users\\agarcia\\marcaje\\cliente\\src\\index.js":"1","C:\\Users\\agarcia\\marcaje\\cliente\\src\\reportWebVitals.js":"2","C:\\Users\\agarcia\\marcaje\\cliente\\src\\App.js":"3","C:\\Users\\agarcia\\marcaje\\cliente\\src\\componentes\\Reloj.js":"4","C:\\Users\\agarcia\\marcaje\\cliente\\src\\componentes\\Detectar_Click.js":"5"},{"size":521,"mtime":1645713347680,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1645713347681,"results":"8","hashOfConfig":"7"},{"size":7503,"mtime":1646239845732,"results":"9","hashOfConfig":"10"},{"size":394,"mtime":1645713347676,"results":"11","hashOfConfig":"7"},{"size":916,"mtime":1644428310773,"results":"12","hashOfConfig":"7"},{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4wiv19",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"2yvu7k",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"C:\\Users\\agarcia\\marcaje\\cliente\\src\\index.js",[],[],"C:\\Users\\agarcia\\marcaje\\cliente\\src\\reportWebVitals.js",[],[],"C:\\Users\\agarcia\\marcaje\\cliente\\src\\App.js",["30","31","32","33","34","35","36","37"],[],"import React, {Component,useEffect, useRef, useState} from 'react';\r\nimport logo from './img/logo.jpg';\r\nimport Reloj from './componentes/Reloj';\r\nimport Axios from 'axios'\r\nimport './css/App.css';\r\nimport { findAllByTestId } from '@testing-library/react';\r\n\r\n\r\n\r\n//hay un retraso de 30 seg al marcar con el lector\r\n//ver como se pasa la hora en una variable para el calculo de horas\r\n\r\n\r\nconst date = new Date();\r\n\r\nfunction App (){\r\n\r\nconst[mensajeNombre, setMensajeNombre] =useState(\"\");\r\nconst[mensajeApellido, setMensajeApellido] =useState(\"\");\r\nconst[mensajeHoraEnt, setMensajeHoraEnt] =useState(\"\");\r\nconst[mensajeHoraSal, setMensajeHoraSal] =useState(\"\");\r\nconst[mensajeHoraEntAlm, setMensajeHoraEntAlm] =useState(\"\");\r\nconst[mensajeHoraSalAlm, setMensajeHoraSalAlm] =useState(\"\");\r\n\r\n  //////\r\n  const [state, setState] = useState('');\r\n    \r\n\r\n  const captura = (event) => {\r\n    \r\n    //condicion para la busqueda e ingreso de datos cuando el lector manda la señal\r\n    if(event.key==='Enter'){\r\n      \r\n    //se cambia el estado al nombre de la tecla que es presionada, en este caso es la tecla enter\r\n      setState(event.key);\r\n      //window.location.href = window.location.href;\r\n      //se llama a la funcion \r\n      busquedaCB();\r\n      \r\n    }\r\n    \r\n  };\r\n////////\r\n\r\n//se declaran variables para envío de datos del MVC\r\nconst [codigo_barra, setCodigo_Barra] = useState(\"\");\r\n\r\n//Se obtiene la fecha actual y se divide en fragmentos para mostrar en el diseño luego\r\n/////\r\n  const [dateTime, setDateTime] = useState({\r\n    hours: date.getHours(),\r\n    minutes: date.getMinutes(),\r\n    seconds: date.getSeconds()\r\n  });\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      const date = new Date();\r\n      setDateTime({\r\n        hours: date.getHours(),\r\n        minutes: date.getMinutes(),\r\n        seconds: date.getSeconds(),\r\n      });\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n/////\r\n\r\n \r\n//hace focus al texbox que obtendrá la variable del codigo barras\r\n  const focusDiv = useRef();\r\nuseEffect(()=>{\r\n  if(focusDiv.current)focusDiv.current.focus();\r\n},[focusDiv]);\r\n//\r\n\r\n//contendrá la busqueda del codigo barra\r\n//luego de busqueda se hará un if para saber si se ingresa o modifica el campo\r\n\r\n//insertar datos\r\nconst ingresoDatos =()=>{\r\n  Axios.post('http://localhost:3001/create', {  \r\n\r\n  \r\n    codigo_barra: codigo_barra,\r\n    //se llama a la fecha y obtiene solamente la hora\r\n    hora_marcaje:date.toLocaleTimeString(),\r\n    dia_marcaje: date.getDate(),\r\n    mes_marcaje: (date.getMonth()+1),\r\n    periodo_marcaje: date.getFullYear(),\r\n}).then(()=>{\r\n\r\nconsole.log(date.toLocaleString());\r\nconsole.log(\"conexion exitosa\");\r\nconsole.log(\"hora:\");\r\nconsole.log(date.toLocaleTimeString());\r\nconsole.log(date.getDate() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getFullYear());\r\n//refresca la pagina para liberar el cargado de memoria de las variables usadas\r\nwindow.location.href = window.location.href;\r\n  });\r\n};\r\n//\r\n\r\n//\r\nconst ActualizarDatos = (codigo_barra)=>{\r\n\r\n  Axios.put('http://localhost:3001/actualizar',{\r\n    codigo_barra:codigo_barra,\r\n    hora_marcaje:date.toLocaleTimeString(),\r\n\r\n    dia_marcaje: date.getDate(),\r\n    mes_marcaje: (date.getMonth()+1),\r\n    periodo_marcaje: date.getFullYear(),\r\n\r\n  }).then(()=>{\r\n    window.location.href = window.location.href;\r\n  \r\n  });  \r\n};\r\n//\r\n\r\n//buscar datos\r\nconst busquedaCB = () => {\r\n  Axios.post('http://localhost:3001/buscarEmpleado',{\r\n    codigo_barra:codigo_barra\r\n  \r\n}).then((response)=>{\r\n\r\n if(response.data.message){\r\n   //muestra mensaje de Empleado no encontrado\r\n  setMensajeNombre(response.data.message)\r\n  setMensajeApellido(\"\")\r\n  window.location.href = window.location.href;\r\n }else{\r\n\r\n   //obtiene de la posición 0 del array el elemento de la entidad que se declara luego del punto\r\n   setMensajeNombre(response.data[0].nombre)\r\n   setMensajeApellido(response.data[0].apellido)\r\n\r\n   ingresoDatos();\r\n   //para la modificacion comparar codigo de barra y fecha actual, luego if para ver si el campo de entrada está en NULL\r\n   //si es null ingreso hra entrada, de lo contrario ingreso hra salida.\r\n   ActualizarDatos(codigo_barra);\r\n\r\n\r\n   \r\n }\r\n\r\n  });\r\n\r\n};\r\n//\r\n\r\n\r\nconst busquedaPr = () => {\r\n  Axios.post('http://localhost:3001/buscarFecha',{\r\n    codigo_barra:codigo_barra,\r\n    dia_marcaje: date.getDate(),\r\n    mes_marcaje: (date.getMonth()+1),\r\n    periodo_marcaje: date.getFullYear(),\r\n\r\n}).then((response)=>{\r\n\r\n if(response.data.message){\r\n   //muestra mensaje de Empleado no encontrado\r\n  setMensajeNombre(response.data.message);\r\n  //setMensajeApellido(\"\")\r\n  //window.location.href = window.location.href;\r\n }else{\r\n   //obtiene de la posición 0 del array el elemento de la entidad que se declara luego del punto\r\n   //setMensajeNombre(response.data.message)\r\n   //setMensajeApellido(response.data[0].apellido)\r\n   setMensajeNombre(response.data[0].hra_entrada);\r\n/////\r\n   setMensajeHoraEnt(response.data[0].hra_entrada)\r\n   setMensajeHoraSalAlm(response.data[0].hra_salida_alm)\r\n   setMensajeHoraEntAlm(response.data[0].hra_entrada_alm)\r\n   setMensajeHoraSal(response.data[0].hra_salida)\r\n\r\nif (mensajeHoraEnt != null && mensajeHoraSalAlm == null && mensajeHoraEntAlm == null && mensajeHoraSal == null){\r\nconsole.log(\"Ingreso mensaje hora Salida Almuerzo: 1\");\r\n}else{\r\n  if(mensajeHoraEnt != null && mensajeHoraSalAlm != null && mensajeHoraEntAlm == null && mensajeHoraSal == null){\r\n    console.log(\"Ingreso mensaje hora Entrada Almuerzo: 2\");\r\n}else{\r\n  if(mensajeHoraEnt != null && mensajeHoraSalAlm != null && mensajeHoraEntAlm != null && mensajeHoraSal == null){\r\n    console.log(\"Ingreso mensaje hora Salida: 3\");\r\n    }else{\r\n      if(mensajeHoraEnt != null && mensajeHoraSalAlm != null && mensajeHoraEntAlm != null && mensajeHoraSal != null){\r\n        console.log(\"Ya se han realizado todos los marcajes del día: 4\");\r\n      }else{\r\n        console.log(\"El empleado ha realizado un marcaje erróneo 1072022\");\r\n      }\r\n    }\r\n  }\r\n}\r\n//////\r\n\r\n   //se obtiene el dato null pero luego del elemento que lo tiene ej:\r\n   //4 tiene null pero no se muestra, 5 no tiene null pero se muestra el null del 4\r\n    if(mensajeNombre === null){\r\n    console.log(\"obtiene dato NULL\");\r\n    }else{\r\n    console.log(\"valor\");\r\n    //console.log(setMensajeNombre);\r\n   \r\n    }\r\n    //setMensajeNombre(response.data[0].hra_entrada)\r\n\r\n    //ingresoDatos();\r\n    //para la modificacion comparar codigo de barra y fecha actual, luego if para ver si el campo de entrada está en NULL\r\n    //si es null ingreso hra entrada, de lo contrario ingreso hra salida.\r\n    //ActualizarDatos(codigo_barra);\r\n    }\r\n    console.log(response);\r\n    });\r\n\r\n};\r\n\r\n\r\n\r\n\r\n  return(\r\n    <main>\r\n    <div className =\"img_logo\">\r\n      <img src={logo}/>\r\n    </div>\r\n    <div className=\"reloj\">\r\n      <div>\r\n        {dateTime.hours}:{dateTime.minutes}:{dateTime.seconds}\r\n      </div>\r\n    </div>\r\n    <div className=\"nombre_emp\">\r\n    <h1>{mensajeNombre} {mensajeApellido}</h1>\r\n    </div>\r\n    \r\n      <div className=\"codigo_barra\">\r\n        <input type=\"text\" placeholder='codigo' ref={focusDiv}   onKeyDown={(e) => captura(e)}     onChange={(event) => {setCodigo_Barra(event.target.value);}}/>\r\n      </div>\r\n      <div>\r\n        <button id=\"probar\" onClick={busquedaCB}>Prueba</button>\r\n      </div>\r\n  <div>\r\n  <button id=\"probar2\" onClick={busquedaPr}>Prueba2</button>\r\n      \r\n  </div>\r\n\r\n      \r\n\r\n    </main>\r\n  )\r\n}\r\n  export default App;\r\n","C:\\Users\\agarcia\\marcaje\\cliente\\src\\componentes\\Reloj.js",[],[],"C:\\Users\\agarcia\\marcaje\\cliente\\src\\componentes\\Detectar_Click.js",[],[],["38","39"],{"ruleId":"40","severity":1,"message":"41","line":1,"column":16,"nodeType":"42","messageId":"43","endLine":1,"endColumn":25},{"ruleId":"40","severity":1,"message":"44","line":3,"column":8,"nodeType":"42","messageId":"43","endLine":3,"endColumn":13},{"ruleId":"40","severity":1,"message":"45","line":6,"column":10,"nodeType":"42","messageId":"43","endLine":6,"endColumn":25},{"ruleId":"40","severity":1,"message":"46","line":26,"column":10,"nodeType":"42","messageId":"43","endLine":26,"endColumn":15},{"ruleId":"47","severity":1,"message":"48","line":98,"column":24,"nodeType":"49","messageId":"50","endLine":98,"endColumn":44},{"ruleId":"47","severity":1,"message":"48","line":115,"column":28,"nodeType":"49","messageId":"50","endLine":115,"endColumn":48},{"ruleId":"47","severity":1,"message":"48","line":132,"column":26,"nodeType":"49","messageId":"50","endLine":132,"endColumn":46},{"ruleId":"51","severity":1,"message":"52","line":225,"column":7,"nodeType":"53","endLine":225,"endColumn":24},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Reloj' is defined but never used.","'findAllByTestId' is defined but never used.","'state' is assigned a value but never used.","no-self-assign","'window.location.href' is assigned to itself.","MemberExpression","selfAssignment","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-global-assign","no-unsafe-negation"]